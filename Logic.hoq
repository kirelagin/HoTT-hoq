import Functional


record True where constructor true
data False

bot-elim : (A : Prop) -> False -> A
bot-elim _ ()

not : Prop -> Prop
not A = A -> False

contradiction : (A B : Prop) -> A -> not A -> B
contradiction _ B a na = bot-elim B (na a)

contraposition : (A B : Prop) -> (A -> B) -> (not B -> not A)
contraposition A B = flip (B -> False) (A -> B) (\_ _ -> (A -> False)) (compose' A B False)

contraposition-not : (A B : Prop) -> (A -> not B) -> (B -> not A)
contraposition-not A B = flip A B (\_ _ -> False)


record and (A B : Type) where
   fst : A
   snd : B

data or (A B : Type) = inl A | inr B
