import Functional


idp : {A : Type} -> {a : A} -> a = a
idp _ a = path (const a)

idp' : {A : Type} -> (a : A) -> a = a
idp' _ a = path (const a)

transport : {A : Type} (B : A -> Type) {a a' : A} -> a = a' -> B a -> B a'
transport _ B _ _ p x = coe (\i -> B (p @ i)) left x right

transport-Type1 : {A : Type} (B : A -> Type1) {a a' : A} -> a = a' -> B a -> B a'
transport-Type1 _ B _ _ p x = coe (\i -> B (p @ i)) left x right

psqueeze : {A : Type} {a a' : A} (p : a = a') (i : I) -> a = p @ i
psqueeze _ _ _ p i = path (\j -> p @ squeeze i j)

psqueeze' : {A : Type} {a a' : A} (p : a = a') (i : I) -> p @ i = a'
psqueeze' _ _ _ p i = path (\j -> p @ squeeze' i j)


inv : {A : Type} {a a' : A} -> a = a' -> a' = a
inv _ a _ p = transport (\x -> x = a) p idp

(*) : {A : Type} -> {a a' a'' : A} -> a = a' -> a' = a'' -> a = a''
(*) _ a _ _ p q = transport (\x -> a = x) q p
--              === coe (\i -> a = q @ i) left p right

idp-left : {A : Type} -> {a a' : A} -> (p : a = a') -> idp * p = p
idp-left _ _ _ p = coe (\i -> idp * psqueeze p i = psqueeze p i) left idp right

inv-comp : {A : Type} {a a' : A} (p : a = a') -> inv p * p = idp
inv-comp _ _ _ p = coe (\i -> inv (psqueeze p i) * (psqueeze p i) = idp) left idp right

comp-rightdep : (A : I -> Type) {a a' : A left} {b : A right}
             -> (p : a = a') (q : Path A a' b)
             -> Path A a b
comp-rightdep A _ _ b p q = coe (\i -> Path A (p @ i) b) right q left


pmap : {A B : Type} (f : A -> B) -> {a a' : A} -> a = a' -> f a = f a'
pmap _ _ f _ _ p = path (\i -> f (p @ i))


J1 : {A : Type} {a : A} (B : {a' : A} -> a = a' -> Type) -> B idp -> {a' : A} (p : a = a') -> B p
J1 _ _ B b _ p = coe (\i -> B (psqueeze p i)) left b right

J : {A : Type} (B : (a a' : A) -> a = a' -> Type)
 -> ({a : A} -> B a a idp)
 -> {a a' : A} -> (p : a = a') -> B a a' p
J _ B b a _ p = coe (\i -> B a (p @ i) (psqueeze p i)) left b right


Path-over : {A : Type} (B : A -> Type) {a a' : A} -> a = a' -> (b : B a) (b' : B a') -> Type
Path-over _ B a _ p b b' = transport B p b = b'

-- Thatâ€™s like a path in the total space of the fibration, but the total space
-- is restricted to the fibres lying exactly above the given path.
Path-above : {A : Type} (B : A -> Type) {a a' : A} -> a = a' -> (b : B a) -> Type
Path-above _ B a _ p b = Path (\i -> B (p @ i)) b (transport B p b)

lift-path : {A : Type} (B : A -> Type) {a a' : A} -> (p : a = a') (b : B a) -> Path-above B p b
lift-path _ B _ _ p b = path (coe (\i -> B (p @ i)) left b)

path-above-then-over : (A : I -> Type) {a : A left} {a' : A right}
                    -> Path-above A (path id) a -> Path-over A (path id) a a'
                    -> Path A a a'
path-above-then-over A a _ p q = coe (\j -> Path A a (q @ j)) left p right

lift-path-over : {A : Type} (B : A -> Type) {a a' : A} {b : B a} {b' : B a'}
              -> (p : a = a') -> Path-over B p b b'
              -> Path (\i -> B (p @ i)) b b'
lift-path-over _ B a a' b b' p q = path-above-then-over (\i -> B (p @ i)) (lift-path B p b) q
