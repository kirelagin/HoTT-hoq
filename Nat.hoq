import Logic
import Types


data Nat = zero | succ Nat

n_0 : Nat
n_0 = zero

n_1 : Nat
n_1 = succ n_0

n_2 : Nat
n_2 = succ n_1

n_3 : Nat
n_3 = succ n_2


pred : Nat -> Nat
pred zero = zero
pred (succ n) = n

(+) : Nat -> Nat -> Nat
(+) zero m = m
(+) (succ n) m = succ (n + m)

(<=) : Nat -> Nat -> Prop
(<=) zero _ = True
(<=) _ zero = False
(<=) (succ m) (succ n) = m <= n

plus-zero : (m : Nat) -> m = m + zero
plus-zero zero = refl
plus-zero (succ m) = eq-cong succ (plus-zero m)
