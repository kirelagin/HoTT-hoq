import Paths
import Types


record F-inverse {A B : Type} (f : A -> B) where
  constructor isF-inverse
  g : B -> A
  f-then-g : (a : A) -> g (f a) = a
  g-then-f : (b : B) -> f (g b) = b

record QuaziEquiv (A B : Type) where
  constructor quaziEquiv
  f : A -> B
  f-inv: F-inverse f


id-QuaziEquiv : {A : Type} -> QuaziEquiv A A
id-QuaziEquiv _ = quaziEquiv id (isF-inverse id (\_ -> idp) (\_ -> idp))

QuaziEquiv-inv : {A B : Type} -> QuaziEquiv A B -> QuaziEquiv B A
QuaziEquiv-inv _ _ (quaziEquiv f (isF-inverse g h1 h2)) = quaziEquiv g (isF-inverse f h2 h1)


quaziEquiv-to-path : {A B : Type} -> QuaziEquiv A B -> A = B
quaziEquiv-to-path A B e = path (\i -> iso A B (e.f) (e.f-inv.g) (e.f-inv.f-then-g) (e.f-inv.g-then-f) i)

path-to-QuaziEquiv-f : {A B : Type} -> A = B -> (A -> B)
path-to-QuaziEquiv-f A B p = transport-Type1 (\t -> t) p

path-to-QuaziEquiv-g : {A B : Type} -> A = B -> (B -> A)
path-to-QuaziEquiv-g A B p = transport-Type1 (\t -> t) (inv p)

path-to-QuaziEquiv-f-then-g : {A B : Type} -> (p : A = B)
                           -> ((a : A) -> path-to-QuaziEquiv-g p (path-to-QuaziEquiv-f p a) = a)
path-to-QuaziEquiv-f-then-g A B p a = coe (\i -> path-to-QuaziEquiv-g (psqueeze p i) (path-to-QuaziEquiv-f (psqueeze p i) a) = a)
                                          left idp right

path-to-QuaziEquiv-g-then-f : {A B : Type} -> (p : A = B)
                           -> ((b : B) -> path-to-QuaziEquiv-f p (path-to-QuaziEquiv-g p b) = b)
path-to-QuaziEquiv-g-then-f A B p b = coe (\i -> path-to-QuaziEquiv-f (psqueeze' p i) (path-to-QuaziEquiv-g (psqueeze' p i) b) = b)
                                          right idp left

path-to-quaziEquiv : {A B : Type} -> A = B -> QuaziEquiv A B
path-to-quaziEquiv _ _ p = quaziEquiv (path-to-QuaziEquiv-f p)
                           (isF-inverse (path-to-QuaziEquiv-g p)
                                        (path-to-QuaziEquiv-f-then-g p)
                                        (path-to-QuaziEquiv-g-then-f p))
