import Paths
import Types


record IsQuaziEquiv {A B : Type} (f : A -> B) where
  constructor isQuaziEquiv
  g : B -> A
  f-then-g : (a : A) -> g (f a) = a
  g-then-f : (b : B) -> f (g b) = b

record QuaziEquiv (A B : Type) where
  constructor quaziEquiv
  f : A -> B
  f-inv: IsQuaziEquiv f

quaziEquiv-to-path : {A B : Type} -> QuaziEquiv A B -> A = B
quaziEquiv-to-path A B e = path (\i -> iso A B (e.f) (e.f-inv.g) (e.f-inv.f-then-g) (e.f-inv.g-then-f) i)

-- TODO
--path-to-quaziEquiv : {A B : Type} -> A = B -> QuaziEquiv A B
--path-to-quaziEquiv _ _ p = quaziEquiv (transport-Type1 (\t -> t) p)
--                           (isQuaziEquiv (transport-Type1 (\t -> t) (inv p)) idp idp)
