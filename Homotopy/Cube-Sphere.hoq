import Paths
import Homotopy.Cube
import Homotopy.Equivalence
import Homotopy.HLevel
import Homotopy.Sphere


One-isContr : isContr One
One-isContr = unit , One-all-eq

sn-Cube-all-eq : (n : Nat) -> (c : isContr (n-Cube n))
              -> (x : n-Cube (succ n)) -> west' (n-Cube n) (n-Cube n) id (c.proj1) = x
sn-Cube-all-eq n c (west x)   = idp
                              * pmap west (c.proj2 x)
sn-Cube-all-eq n c (east x)   = path (side (c.proj1))
                              * pmap east (c.proj2 x)
sn-Cube-all-eq n c (side x i) = psqueeze (path (side (c.proj1))) i
                              * pmap (\z -> side z i) (c.proj2 x)

n-Cube-isContr : (n : Nat) -> isContr (n-Cube n)
n-Cube-isContr zero = One-isContr
n-Cube-isContr (succ n) = west ((n-Cube-isContr n).proj1) , sn-Cube-all-eq n (n-Cube-isContr n)


n-Pyramid : Nat -> (Nat -> Type) -> Type
n-Pyramid zero _ = Empty
n-Pyramid (succ n) A = GSusp (A n) One (\_ -> unit)

n-Sphere-dCube-equiv : (n : Nat) -> QuaziEquiv (n-Pyramid n n-dCube) (n-dCube n)
n-Sphere-dCube-equiv zero = id-QuaziEquiv
n-Sphere-dCube-equiv (succ n) = GSusp-on-contr-equiv One-isContr (\_ -> unit)
                                                     (n-Cube-isContr n) (n-dCube-emb n)

n-Sphere-n-Pyramid-equiv : (A : Nat -> Type) -> ((m : Nat) -> QuaziEquiv (n-Sphere m) (A m))
                        -> (n : Nat) -> QuaziEquiv (n-Sphere n) (n-Pyramid n A)
n-Sphere-n-Pyramid-equiv _ _ zero = id-QuaziEquiv
