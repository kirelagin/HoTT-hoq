import Types
import Homotopy.Cube
import Homotopy.Equivalence
import Homotopy.Sphere


-- Stupid constructors
bot_i : (n : Nat) -> n-dCube n
bot_i zero = false
bot_i (succ _) = bot

top_i : (n : Nat) -> n-dCube n
top_i zero = true
top_i (succ _) = top

floor_i : (n : Nat) -> I -> n-dCube n -> n-dCube (succ n)
floor_i _ i c = floor i c

ceiling_i : (n : Nat) -> I -> n-dCube n -> n-dCube (succ n)
ceiling_i _ i c = ceiling i c


-- Useful paths
via-floor : (n : Nat) -> (x : n-dCube n) -> bot_i (succ n) = floor_i n right x
via-floor _ x = path (\i -> floor i x)

via-surface : (n : Nat) -> (x : n-dCube n) -> floor_i n right x = ceiling_i n right x
via-surface _ x = path (\i -> surface i x)

via-ceiling-inv : (n : Nat) -> (x : n-dCube n) -> top_i (succ n) = ceiling_i n right x
via-ceiling-inv _ x = path (\i -> ceiling i x)

via-ceiling : (n : Nat) -> (x : n-dCube n) -> ceiling_i n right x = top_i (succ n)
via-ceiling n x = inv (via-ceiling-inv n x)

via-ceiling-rev : (n : Nat) -> (x : n-dCube n) -> (i : I) -> ceiling_i n right x = ceiling_i n i x
via-ceiling-rev n x i = inv (psqueeze' (via-ceiling-inv n x) i)

cube-merid : (n : Nat) -> (x : n-dCube n) -> bot_i (succ n) = top_i (succ n)
cube-merid n x = via-floor n x * via-surface n x * via-ceiling n x


--
dCube-to-Sphere : (i : Nat) -> QuaziEquiv (n-dCube i) (n-Sphere i) -> n-dCube (succ i) -> n-Sphere (succ i)
dCube-to-Sphere _ _ top = north
dCube-to-Sphere _ _ (ceiling _ _) = north
dCube-to-Sphere _ _ (surface _ _) = north
dCube-to-Sphere _ step (floor i c) = merid i (step.f c)
dCube-to-Sphere _ _ bot = south

Sphere-to-dCube : (i : Nat) -> QuaziEquiv (n-dCube i) (n-Sphere i) -> n-Sphere (succ i) -> n-dCube (succ i)
Sphere-to-dCube _ _ north = top
Sphere-to-dCube n step (merid i s) = (cube-merid n (step.f-inv.g s)) @ i
Sphere-to-dCube _ _ south = bot

cube-sphere-cube : (n : Nat) -> (step : QuaziEquiv (n-dCube n) (n-Sphere n)) -> (x : n-dCube (succ n)) -> Sphere-to-dCube n step (dCube-to-Sphere n step x) = x
cube-sphere-cube n step top           = inv (cube-merid n (step.f-inv.g (step.f (bot_i n))))
                                      * via-floor n (bot_i n)
                                      * via-surface n (bot_i n)
                                      * via-ceiling n (bot_i n)
cube-sphere-cube n step (ceiling i c) = inv (cube-merid n (step.f-inv.g (step.f c)))
                                      * via-floor n c
                                      * via-surface n c
                                      * via-ceiling-rev n c i
cube-sphere-cube n step (surface i c) = inv (cube-merid n (step.f-inv.g (step.f c)))
                                      * via-floor n c
                                      * psqueeze (via-surface n c) i
                                      * idp
cube-sphere-cube n step (floor i c)   = inv (psqueeze (cube-merid n (step.f-inv.g (step.f c))) i)
                                      * psqueeze (via-floor n c) i
                                      * idp
cube-sphere-cube n step bot           = idp


--sphere-cube-sphere : (n : Nat) -> (step : QuaziEquiv (n-dCube n) (n-Sphere n)) -> (x : n-Sphere (succ n)) -> dCube-to-Sphere n step (Sphere-to-dCube n step x) = x
--
--
--
--dCube-equiv-Sphere-step : (n : Nat) -> QuaziEquiv (n-dCube n) (n-Sphere n) -> QuaziEquiv (n-dCube (succ n)) (n-Sphere (succ n))
--dCube-equiv-Sphere-step n step = quaziEquiv (dCube-to-Sphere n step) (isQuaziEquiv (Sphere-to-dCube n step) (cube-sphere-cube n step) (sphere-cube-sphere n step))
--
--dCube-equiv-Sphere : (n : Nat) -> QuaziEquiv (n-dCube n) (n-Sphere n)
--dCube-equiv-Sphere zero = quaziEquiv id (isQuaziEquiv id idp' idp')
--dCube-equiv-Sphere (succ n) = dCube-equiv-Sphere-step n (dCube-equiv-Sphere n)
