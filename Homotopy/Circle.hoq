import Nat
import Paths
import Homotopy.Suspension
import Types

record Pointed where
    constructor pointed
    type : Type
    base : type

data wedge (A1 A2 : Pointed) = base | inl (A1.type) | inr (A2.type) with
    base = inl (A1.base)
    base = inr (A2.base)

data Circle = base | loop I with
    loop left = base
    loop right = base


Circle-elim' : (P : Circle -> Type) (b : P base) -> Path (\i -> P (loop i)) b b -> (x : Circle) -> P x
Circle-elim' P b p base     = b
Circle-elim' P b p (loop i) = p @ i

Circle-elim : (P : Circle -> Type) (b : P base) -> Path-over P (path loop) b b -> (x : Circle) -> P x
Circle-elim P b p = Circle-elim' P b (lift-path-over P (path loop) p)
